#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct person {
    int id;
    char name[50];
    int age;
    int height;
    int weight;
};

struct person *heap;
int heapSize = 0;

void swap(struct person *a, struct person *b) {
    struct person temp = *a;
    *a = *b;
    *b = temp;
}

void minHeapify(int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < heapSize && heap[left].age < heap[smallest].age)
        smallest = left;
    if (right < heapSize && heap[right].age < heap[smallest].age)
        smallest = right;

    if (smallest != i) {
        swap(&heap[i], &heap[smallest]);
        minHeapify(smallest);
    }
}

void maxHeapify(int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < heapSize && heap[left].weight > heap[largest].weight)
        largest = left;
    if (right < heapSize && heap[right].weight > heap[largest].weight)
        largest = right;

    if (largest != i) {
        swap(&heap[i], &heap[largest]);
        maxHeapify(largest);
    }
}

void buildMinHeap() {
    for (int i = heapSize / 2 - 1; i >= 0; i--)
        minHeapify(i);
}

void buildMaxHeap() {
    for (int i = heapSize / 2 - 1; i >= 0; i--)
        maxHeapify(i);
}

// Other functions for insert, delete, read data, and find youngest's weight

int main() {
    int choice, numPersons;
    struct person newPerson;

    printf("Enter the number of persons: ");
    scanf("%d", &numPersons);

    // Allocate heap array dynamically
    heap = (struct person *)malloc(numPersons * sizeof(struct person));
    if (heap == NULL) {
        printf("Memory allocation failed!\n");
        return 1;
    }

    while (1) {
        printf("\nMAIN MENU\n");
        printf("1. Read Data\n");
        printf("2. Create a Min-heap based on the age\n");
        printf("3. Create a Max-heap based on the weight\n");
        printf("4. Display weight of the youngest person\n");
        printf("5. Insert a new person into the Min-heap\n");
        printf("6. Delete the oldest person\n");
        printf("7. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                readData();
                break;
            case 2:
                buildMinHeap();
                printf("Min-heap based on age created.\n");
                break;
            case 3:
                buildMaxHeap();
                printf("Max-heap based on weight created.\n");
                break;
            case 4:
                findYoungestWeight();
                break;
            case 5:
                printf("Enter ID, Name, Age, Height, Weight of the person:\n");
                scanf("%d %s %d %d %d", &newPerson.id, newPerson.name, &newPerson.age, &newPerson.height, &newPerson.weight);
                insertPerson(newPerson);
                break;
            case 6:
                deleteOldest();
                break;
            case 7:
                free(heap);
                printf("Exiting program.\n");
                return 0;
            default:
                printf("Invalid choice. Please try again.\n");
        }
    }

    free(heap);
    return 0;
}

