#include <stdio.h>
#include <limits.h>
#include <stdlib.h>

int **m, **s;

void matrixChainOrder(int p[], int n) {
    m = (int **)malloc(n * sizeof(int *));
    s = (int **)malloc(n * sizeof(int *));
    for (int i = 1; i < n; i++) {
        m[i] = (int *)malloc(n * sizeof(int));
        s[i] = (int *)malloc(n * sizeof(int));
    }

    for (int i = 1; i < n; i++)
        m[i][i] = 0;

    for (int l = 2; l < n; l++) {
        for (int i = 1; i < n - l + 1; i++) {
            int j = i + l - 1;
            m[i][j] = INT_MAX;
            for (int k = i; k <= j - 1; k++) {
                int q = m[i][k] + m[k + 1][j] + p[i - 1] * p[k] * p[j];
                if (q < m[i][j]) {
                    m[i][j] = q;
                    s[i][j] = k;
                }
            }
        }
    }
}

void printOptimalParens(int i, int j) {
    if (i == j)
        printf(" A%d ", i);
    else {
        printf("(");
        printOptimalParens(i, s[i][j]);
        printOptimalParens(s[i][j] + 1, j);
        printf(")");
    }
}

int main() {
    int n;
    printf("Enter number of matrices: ");
    scanf("%d", &n);
    int p[n + 1];
    for (int i = 0; i < n; i++) {
        printf("Enter row and col size of A%d: ", i + 1);
        if (i > 0)
            scanf("%d", &p[i]);
        scanf("%d", &p[i + 1]);
        if (i > 0 && p[i] != p[i - 1]) {
            printf("Incompatible dimensions.\n");
            return 1;
        }
    }

    matrixChainOrder(p, n + 1);

    printf("M Table:\n");
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < n; j++) {
            if (j < i)
                printf("0\t");
            else
                printf("%d\t", m[i][j]);
        }
        printf("\n");
    }

    printf("S Table:\n");
    for (int i = 1; i < n; i++) {
        for (int j = 1; j < n; j++) {
            if (j <= i)
                printf("0\t");
            else
                printf("%d\t", s[i][j]);
        }
        printf("\n");
    }

    printf("Optimal parenthesization: ");
    printOptimalParens(1, n);
    printf("\nThe optimal ordering of the given matrices requires %d scalar multiplications.\n", m[1][n]);

    for (int i = 1; i < n; i++) {
        free(m[i]);
        free(s[i]);
    }
    free(m);
    free(s);

    return 0;
}
