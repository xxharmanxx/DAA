#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int u, v, weight;
} Edge;

typedef struct {
    Edge* edges;
    int n, e;
} Graph;

typedef struct {
    int parent, rank;
} subset;

int compareEdges(const void* a, const void* b) {
    Edge* a1 = (Edge*)a;
    Edge* b1 = (Edge*)b;
    return a1->weight > b1->weight;
}

int find(subset subsets[], int i) {
    if (subsets[i].parent != i)
        subsets[i].parent = find(subsets, subsets[i].parent);

    return subsets[i].parent;
}

void Union(subset subsets[], int x, int y) {
    int xroot = find(subsets, x);
    int yroot = find(subsets, y);

    if (subsets[xroot].rank < subsets[yroot].rank)
        subsets[xroot].parent = yroot;
    else if (subsets[xroot].rank > subsets[yroot].rank)
        subsets[yroot].parent = xroot;
    else {
        subsets[yroot].parent = xroot;
        subsets[xroot].rank++;
    }
}

void KruskalMST(Graph* graph) {
    int V = graph->n;
    Edge result[V]; 
    int e = 0; 
    int i = 0; 

    qsort(graph->edges, graph->e, sizeof(graph->edges[0]), compareEdges);

    subset *subsets = (subset*) malloc(V * sizeof(subset));

    for (int v = 0; v < V; ++v) {
        subsets[v].parent = v;
        subsets[v].rank = 0;
    }

    while (e < V - 1 && i < graph->e) {
        Edge next_edge = graph->edges[i++];

        int x = find(subsets, next_edge.u);
        int y = find(subsets, next_edge.v);

        if (x != y) {
            result[e++] = next_edge;
            Union(subsets, x, y);
        }
    }

    int totalCost = 0;
    printf("Edges in the constructed MST:\n");
    for (i = 0; i < e; ++i) {
        printf("%d -- %d == %d\n", result[i].u, result[i].v, result[i].weight);
        totalCost += result[i].weight;
    }
    printf("Total cost of MST: %d\n", totalCost);
}

int main() {
    int V, E;
    printf("Enter number of nodes and edges: ");
    scanf("%d %d", &V, &E);

    Graph* graph = (Graph*)malloc(sizeof(Graph));
    graph->n = V;
    graph->e = E;
    graph->edges = (Edge*)malloc(E * sizeof(Edge));

    printf("Enter the edges (u v w):\n");
    for(int i = 0; i < E; i++) {
        scanf("%d %d %d", &graph->edges[i].u, &graph->edges[i].v, &graph->edges[i].weight);
    }

    KruskalMST(graph);

    free(graph->edges);
    free(graph);

    return 0;
}
