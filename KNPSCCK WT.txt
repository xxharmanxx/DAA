#include <stdio.h>
#include <stdlib.h>

typedef struct {
    int item_id;
    double item_profit;
    double item_weight;
    double profit_weight_ratio;
} ITEM;

void heapify(ITEM items[], int n, int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < n && items[left].profit_weight_ratio > items[largest].profit_weight_ratio)
        largest = left;

    if (right < n && items[right].profit_weight_ratio > items[largest].profit_weight_ratio)
        largest = right;

    if (largest != i) {
        ITEM temp = items[i];
        items[i] = items[largest];
        items[largest] = temp;

        heapify(items, n, largest);
    }
}

void heapSort(ITEM items[], int n) {
    for (int i = n / 2 - 1; i >= 0; i--)
        heapify(items, n, i);

    for (int i = n - 1; i >= 0; i--) {
        ITEM temp = items[0];
        items[0] = items[i];
        items[i] = temp;

        heapify(items, i, 0);
    }
}

double fractionalKnapsack(int n, ITEM items[], double capacity) {
    double totalProfit = 0.0;

    for (int i = 0; i < n; i++) {
        if (items[i].item_weight <= capacity) {
            capacity -= items[i].item_weight;
            totalProfit += items[i].item_profit;
            printf("Item No %d \t%lf \t%lf \t1.000000\n", items[i].item_id, items[i].item_profit, items[i].item_weight);
        } else {
            totalProfit += (capacity / items[i].item_weight) * items[i].item_profit;
            printf("Item No %d \t%lf \t%lf \t%lf\n", items[i].item_id, items[i].item_profit, items[i].item_weight, capacity / items[i].item_weight);
            break;
        }
    }

    return totalProfit;
}

int main() {
    int n;
    double capacity;

    printf("Enter the number of items: ");
    scanf("%d", &n);

    ITEM *items = (ITEM *)malloc(n * sizeof(ITEM));

    for (int i = 0; i < n; i++) {
        items[i].item_id = i + 1;
        printf("Enter the profit and weight of item no %d: ", i + 1);
        scanf("%lf %lf", &items[i].item_profit, &items[i].item_weight);
        items[i].profit_weight_ratio = items[i].item_profit / items[i].item_weight;
    }

    printf("Enter the capacity of knapsack: ");
    scanf("%lf", &capacity);

    heapSort(items, n);

    printf("Item No \tprofit \tWeight \tAmount to be taken\n");
    double maxProfit = fractionalKnapsack(n, items, capacity);
    printf("Maximum profit: %lf\n", maxProfit);

    free(items);
    return 0;
}
