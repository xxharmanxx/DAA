#include <stdio.h>
#include <stdlib.h>
#include <string.h>

struct person {
    int id;
    char name[50];
    int age;
    int height;
    int weight;
};

struct person *heap;
int heapSize = 0;

void swap(struct person *a, struct person *b) {
    struct person temp = *a;
    *a = *b;
    *b = temp;
}

void minHeapify(int i) {
    int smallest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < heapSize && heap[left].age < heap[smallest].age)
        smallest = left;
    if (right < heapSize && heap[right].age < heap[smallest].age)
        smallest = right;

    if (smallest != i) {
        swap(&heap[i], &heap[smallest]);
        minHeapify(smallest);
    }
}

void maxHeapify(int i) {
    int largest = i;
    int left = 2 * i + 1;
    int right = 2 * i + 2;

    if (left < heapSize && heap[left].weight > heap[largest].weight)
        largest = left;
    if (right < heapSize && heap[right].weight > heap[largest].weight)
        largest = right;

    if (largest != i) {
        swap(&heap[i], &heap[largest]);
        maxHeapify(largest);
    }
}

void buildMinHeap() {
    for (int i = heapSize / 2 - 1; i >= 0; i--)
        minHeapify(i);
}

void buildMaxHeap() {
    for (int i = heapSize / 2 - 1; i >= 0; i--)
        maxHeapify(i);
}

// Other functions for insert, delete, read data, and find youngest's weight

int main() {
    int choice;
    // Menu-driven interface and switch-case to handle options
    // Allocate heap array dynamically based on the number of students read from the file
    // Implement menu options

    return 0;
}
