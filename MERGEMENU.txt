#include <stdio.h>
#include <stdlib.h>
#include <time.h>

int totalComparisons = 0;

void merge(int arr[], int l, int m, int r) {
    int i, j, k;
    int n1 = m - l + 1;
    int n2 = r - m;

    int L[n1], R[n2];

    for (i = 0; i < n1; i++)
        L[i] = arr[l + i];
    for (j = 0; j < n2; j++)
        R[j] = arr[m + 1 + j];

    i = 0;
    j = 0;
    k = l;

    while (i < n1 && j < n2) {
        totalComparisons++;
        if (L[i] <= R[j]) {
            arr[k] = L[i];
            i++;
        } else {
            arr[k] = R[j];
            j++;
        }
        k++;
    }

    while (i < n1) {
        arr[k] = L[i];
        i++;
        k++;
    }

    while (j < n2) {
        arr[k] = R[j];
        j++;
        k++;
    }
}

void mergeSort(int arr[], int l, int r) {
    if (l < r) {
        int m = l + (r - l) / 2;

        mergeSort(arr, l, m);
        mergeSort(arr, m + 1, r);

        merge(arr, l, m, r);
    }
}

void sortFromFileAndWrite(const char *inputFileName, const char *outputFileName) {
    FILE *file = fopen(inputFileName, "r");
    if (file == NULL) {
        printf("Cannot open input file.\n");
        exit(1);
    }

    int n, i = 0;
    fscanf(file, "%d", &n);
    int *arr = (int *)malloc(n * sizeof(int));

    while (fscanf(file, "%d", &arr[i++]) == 1);
    fclose(file);

    clock_t start, end;
    double cpu_time_used;

    start = clock();
    mergeSort(arr, 0, n - 1);
    end = clock();

    cpu_time_used = ((double)(end - start)) / CLOCKS_PER_SEC;

    file = fopen(outputFileName, "w");
    if (file == NULL) {
        printf("Cannot open output file.\n");
        free(arr);
        exit(1);
    }

    for (i = 0; i < n; i++) {
        fprintf(file, "%d ", arr[i]);
    }
    fprintf(file, "\nExecution time: %f seconds\n", cpu_time_used);
    fprintf(file, "Total comparisons: %d\n", totalComparisons);
    fclose(file);

    printf("Sorting completed. Check '%s' for results.\n", outputFileName);
    printf("Execution time: %f seconds\n", cpu_time_used);
    printf("Total comparisons: %d\n", totalComparisons);

    free(arr);
}

int main() {
    int choice;

    printf("Choose the type of data to sort:\n");
    printf("1. Ascending Order Data\n2. Descending Order Data\n3. Random Data\n");
    scanf("%d", &choice);

    switch (choice) {
        case 1:
            sortFromFileAndWrite("inAsce.dat", "outMergeAsce.dat");
            break;
        case 2:
            sortFromFileAndWrite("inDesc.dat", "outMergeDesc.dat");
            break;
        case 3:
            sortFromFileAndWrite("inRand.dat", "outMergeRand.dat");
            break;
        default:
            printf("Invalid choice.\n");
            break;
    }

    return 0;
}
