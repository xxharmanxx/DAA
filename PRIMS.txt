#include <stdio.h>
#include <stdlib.h>
#include <limits.h>

#define MAX_VERTICES 1000

int n; // Number of vertices
int graph[MAX_VERTICES][MAX_VERTICES]; // Graph represented as an adjacency matrix
int parent[MAX_VERTICES]; // To store the MST
int key[MAX_VERTICES]; // Key values used to pick minimum weight edge
int mstSet[MAX_VERTICES]; // To represent set of vertices included in MST

// Function to find the vertex with the minimum key value
int minKey() {
    int min = INT_MAX, min_index;

    for (int v = 0; v < n; v++)
        if (mstSet[v] == 0 && key[v] < min)
            min = key[v], min_index = v;

    return min_index;
}

// Function to print the MST stored in parent[]
void printMST() {
    int totalCost = 0;
    printf("Edge \tWeight\n");
    for (int i = 1; i < n; i++) {
        printf("%d - %d \t%d \n", parent[i] + 1, i + 1, graph[i][parent[i]]);
        totalCost += graph[i][parent[i]];
    }
    printf("Total cost of MST: %d\n", totalCost);
}

// Function implementing Prim's algorithm
void primMST() {
    for (int i = 0; i < n; i++)
        key[i] = INT_MAX, mstSet[i] = 0;

    key[0] = 0;
    parent[0] = -1;

    for (int count = 0; count < n - 1; count++) {
        int u = minKey();

        mstSet[u] = 1;

        for (int v = 0; v < n; v++)
            if (graph[u][v] && mstSet[v] == 0 && graph[u][v] < key[v])
                parent[v] = u, key[v] = graph[u][v];
    }

    printMST();
}

int main() {
    FILE *file = fopen("inUnAdjMat.dat", "r");
    if (file == NULL) {
        printf("Error opening file.\n");
        return 1;
    }

    // Read the number of vertices
    fscanf(file, "%d", &n);

    // Read the adjacency matrix from the file
    for (int i = 0; i < n; i++) {
        for (int j = 0; j < n; j++) {
            fscanf(file, "%d", &graph[i][j]);
        }
    }

    // Close the file
    fclose(file);

    // Run Prim's algorithm
    primMST();

    return 0;
}
